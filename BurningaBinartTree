

 code is according to  gfg BURN TREE PROBLEM


class Solution {
  public:
  //step-1 create mapping and return the target node
  Node* createParentMapping(Node* root,int target,map<Node*,Node*> &nodeToParent){
      Node* res = NULL; //to store the result;
      queue<Node*> q;
      q.push(root);
      nodeToParent[root] = NULL;
      while(!q.empty()){
          Node* front = q.front();
          q.pop();
          if(front->data==target){
              res = front;
          }
          if(front->left){
              nodeToParent[front->left] = front;
              q.push(front->left);
          }
          if(front->right){
              nodeToParent[front->right] = front;
              q.push(front->right);
          }
      }
      return res;
  }
  int burnTree(Node* root,map<Node*,Node*> &nodeToParent){
      
      map<Node*,bool> visited;
      queue<Node*> q;
      q.push(root);
      visited[root] = true;
      int ans = 0;
      while(!q.empty()){
          bool flag = false;
          int size = q.size();
          for(int i=0;i<size;i++){
              //process neighbours
              Node* front = q.front();
              q.pop();
              if(front->left && visited[front->left]==false){
                  flag = 1;
                  q.push(front->left);
                  visited[front->left] = true;
              }
              if(front->right && visited[front->right]==false){
                  flag = 1;
                  q.push(front->right);
                  visited[front->right] = true;
              }
              if(nodeToParent[front] && visited[nodeToParent[front]]==false){
                  flag = 1;
                  q.push(nodeToParent[front]);
                  visited[nodeToParent[front]] = true;
              }
          }
          if(flag==true){
              ans++;
          }
      }
      return ans;
  }
    int minTime(Node* root, int target) 
    {
        map<Node*,Node*> nodeToParent;
        Node* targetNode = createParentMapping(root,target,nodeToParent);
        int ans = burnTree(targetNode,nodeToParent);
        return ans;
    }
};
